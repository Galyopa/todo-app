{"version":3,"sources":["types/FilterBy.ts","components/filters.tsx","api/fetch.ts","api/todos.ts","components/todosContext.tsx","components/Footer.tsx","components/formCreateTodo.tsx","components/todoItem.tsx","components/todoList.tsx","components/todoApp.tsx","App.tsx","index.tsx"],"names":["FilterBy","getActiveClasses","status","classNames","selected","isActive","Filters","className","to","Active","Completed","BASE_URL","request","url","method","data","options","body","JSON","stringify","headers","fetch","then","response","json","client","getUserTodos","userId","removeTodo","todoId","editTodo","TodosContext","createContext","TodosProvider","children","useState","todos","setTodos","useEffect","addTodo","useCallback","newTodo","a","changeStatusTodo","todo","id","completed","toogleALL","isAllCompleted","Promise","all","map","deleteAllCompleted","deleteTodo","editeTodoTitle","newTitle","trim","title","contextValue","useMemo","Provider","value","Footer","useContext","filter","length","type","onClick","FormCreateTodo","onSubmit","setTitle","event","preventDefault","placeholder","onChange","target","TodoItem","inputRef","useRef","isEdit","setEdit","todoTitle","setTodoTitle","current","focus","editing","checked","onDoubleClick","ref","onKeyDown","key","blur","onBlur","TodoList","TodoApp","filterBy","useParams","setIsAllCompleted","isAlltrue","every","item","visibleTodos","htmlFor","App","path","index","element","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.767cec9a.chunk.js","sourcesContent":["export enum FilterBy {\n  Completed = 'completed',\n  Active = 'active',\n}\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\nimport { FilterBy } from '../types/FilterBy';\n\ntype Status = { isActive: boolean };\n\nconst getActiveClasses = (status: Status) => classNames(\n  { selected: status.isActive },\n);\n\nexport const Filters = () => (\n  <ul className=\"filters\">\n    <li>\n      <NavLink\n        to=\"/\"\n        className={getActiveClasses}\n      >\n        All\n      </NavLink>\n    </li>\n\n    <li>\n      <NavLink\n        to={`/${FilterBy.Active}`}\n        className={getActiveClasses}\n      >\n        Active\n      </NavLink>\n    </li>\n\n    <li>\n      <NavLink\n        to={`/${FilterBy.Completed}`}\n        className={getActiveClasses}\n      >\n        Completed\n      </NavLink>\n    </li>\n  </ul>\n);\n","import { Data } from '../types/Data';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: Data = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return fetch(BASE_URL + url, options)\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: Data) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: Data) => request<T>(url, 'PATCH', data),\n  delete: <T>(url: string) => request<T>(url, 'DELETE'),\n};\n","import { Data } from '../types/Data';\nimport { Todo } from '../types/Todo';\nimport { client } from './fetch';\n\nexport const getUserTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const removeTodo = (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n\nexport const editTodo = (todoId: number, data: Data) => {\n  return client.patch(`/todos/${todoId}`, data);\n};\n\nexport const createTodo = (data: Data) => {\n  return client.post('/todos', data);\n};\n","import {\n  createContext,\n  FC,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport {\n  createTodo, editTodo, getUserTodos, removeTodo,\n} from '../api/todos';\nimport { CreateTodo, Todo } from '../types/Todo';\nimport { TodosContextType } from '../types/TodosContext';\n\nconst userId = 3924;\n\ntype Props = {\n  children: React.ReactNode\n};\n\nexport const TodosContext = createContext<TodosContextType | null>(null);\n\nexport const TodosProvider: FC<Props> = ({ children }) => {\n  const [todos, setTodos] = useState<Todo []>([]);\n\n  useEffect(() => {\n    getUserTodos(userId).then(setTodos);\n  }, []);\n\n  const addTodo = useCallback(async (\n    newTodo: CreateTodo,\n  ) => {\n    const createdTodo = await createTodo(newTodo);\n\n    if (createdTodo) {\n      getUserTodos(userId).then(setTodos);\n    }\n  }, []);\n\n  const changeStatusTodo = useCallback(\n    async (todo: Todo) => {\n      const todoId = await editTodo(todo.id, { completed: !todo.completed });\n\n      if (todoId) {\n        getUserTodos(userId).then(setTodos);\n      }\n    }, [],\n  );\n\n  const toogleALL = useCallback(\n    async (isAllCompleted: boolean) => {\n      if (isAllCompleted) {\n        await Promise.all(\n          todos.map(async (todo) => {\n            await editTodo(todo.id, { completed: !todo.completed });\n          }),\n        );\n      } else {\n        await Promise.all(\n          todos.map(async (todo) => {\n            if (!todo.completed) {\n              await editTodo(todo.id, { completed: true });\n            }\n          }),\n        );\n      }\n\n      getUserTodos(userId).then(setTodos);\n    }, [todos],\n  );\n\n  const deleteAllCompleted = useCallback(\n    async () => {\n      await Promise.all(\n        todos.map(async (todo) => {\n          if (todo.completed) {\n            await removeTodo(todo.id);\n          }\n        }),\n      );\n\n      getUserTodos(userId).then(setTodos);\n    }, [todos],\n  );\n\n  const deleteTodo = useCallback(\n    async (todo: Todo) => {\n      const todoId = await removeTodo(todo.id);\n\n      if (todoId) {\n        getUserTodos(userId).then(setTodos);\n      }\n    }, [],\n  );\n\n  const editeTodoTitle = useCallback(\n    async (newTitle: string, todo: Todo) => {\n      let todoId;\n\n      if (!newTitle || !newTitle.trim()) {\n        todoId = deleteTodo(todo);\n      } else {\n        todoId = await editTodo(todo.id, { title: newTitle.trim() });\n      }\n\n      if (todoId) {\n        getUserTodos(userId).then(setTodos);\n      }\n    }, [],\n  );\n\n  const contextValue = useMemo(() => {\n    return {\n      todos,\n      addTodo,\n      changeStatusTodo,\n      deleteTodo,\n      toogleALL,\n      editeTodoTitle,\n      deleteAllCompleted,\n    };\n  }, [todos]);\n\n  return (\n    <TodosContext.Provider value={contextValue}>\n      {children}\n    </TodosContext.Provider>\n  );\n};\n","import { useContext } from 'react';\nimport { TodosContextType } from '../types/TodosContext';\nimport { Filters } from './filters';\nimport { TodosContext } from './todosContext';\n\nexport const Footer = () => {\n  const {\n    todos,\n    deleteAllCompleted,\n  } = useContext(TodosContext) as TodosContextType;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\" data-cy=\"todosCounter\">\n        {todos.filter(todo => todo.completed === false).length}\n        {' '}\n        items left\n      </span>\n\n      <Filters />\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={deleteAllCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n","import { FC, useState } from 'react';\nimport { CreateTodo } from '../types/Todo';\n\ntype Props = {\n  onSubmit(\n    newTodo: CreateTodo,\n  ): void;\n};\n\nexport const FormCreateTodo: FC<Props> = ({ onSubmit }) => {\n  const [title, setTitle] = useState('');\n\n  const handleSubmut = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newTodo: CreateTodo = {\n      title: title.trim(),\n      userId: 3924,\n      completed: false,\n    };\n\n    if (title.trim()) {\n      onSubmit(newTodo);\n      setTitle('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmut}>\n      <input\n        type=\"text\"\n        data-cy=\"createTodo\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={title}\n        onChange={event => setTitle(event.target.value)}\n      />\n    </form>\n  );\n};\n","import classNames from 'classnames';\nimport {\n  FC, useContext, useEffect, useRef, useState,\n} from 'react';\nimport { Todo } from '../types/Todo';\nimport { TodosContextType } from '../types/TodosContext';\nimport { TodosContext } from './todosContext';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoItem: FC<Props> = ({ todo }) => {\n  const {\n    changeStatusTodo,\n    deleteTodo,\n    editeTodoTitle,\n  } = useContext(TodosContext) as TodosContextType;\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [isEdit, setEdit] = useState(false);\n  const [todoTitle, setTodoTitle] = useState(todo.title);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isEdit]);\n\n  const handleDoubleClick = () => {\n    setEdit(true);\n  };\n\n  const handleBlur = () => {\n    if (todoTitle !== todo.title) {\n      editeTodoTitle(todoTitle, todo);\n    }\n\n    setEdit(false);\n  };\n\n  const handleKeyDown = (\n    event: (React.KeyboardEvent<HTMLInputElement>),\n  ) => {\n    if (event.key === 'Enter') {\n      event.target.blur();\n    }\n\n    if (event.key === 'Escape') {\n      setEdit(false);\n    }\n  };\n\n  return (\n    <li\n      className={\n        classNames(\n          { completed: todo.completed === true },\n          { editing: isEdit },\n        )\n      }\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed === true}\n          onChange={() => changeStatusTodo(todo)}\n        />\n        <label onDoubleClick={handleDoubleClick}>\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          data-cy=\"deleteTodo\"\n          onClick={() => deleteTodo(todo)}\n          aria-label=\"remove this todo\"\n        />\n      </div>\n      <input\n        ref={inputRef}\n        type=\"text\"\n        id={`${todo.id}`}\n        className=\"edit\"\n        value={todoTitle}\n        onChange={(event) => setTodoTitle(event.target.value)}\n        onKeyDown={handleKeyDown}\n        onBlur={handleBlur}\n      />\n    </li>\n  );\n};\n","import { FC } from 'react';\nimport { Todo } from '../types/Todo';\nimport { TodoItem } from './todoItem';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: FC<Props> = ({ todos }) => {\n  return (\n    <ul className=\"todo-list\" data-cy=\"todoList\">\n      {\n        todos.map(todo => (\n          <TodoItem todo={todo} key={todo.id} />\n        ))\n      }\n    </ul>\n  );\n};\n","import {\n  useContext, useEffect, useMemo, useState,\n} from 'react';\nimport { useParams } from 'react-router-dom';\nimport { FilterBy } from '../types/FilterBy';\nimport { TodosContextType } from '../types/TodosContext';\nimport { Footer } from './Footer';\nimport { FormCreateTodo } from './formCreateTodo';\nimport { TodosContext } from './todosContext';\nimport { TodoList } from './todoList';\n\nexport const TodoApp = () => {\n  const {\n    todos,\n    addTodo,\n    toogleALL,\n  } = useContext(TodosContext) as TodosContextType;\n  const { filterBy } = useParams();\n  const [isAllCompleted, setIsAllCompleted] = useState(false);\n\n  useEffect(() => {\n    const isAlltrue = todos.every(item => item.completed);\n\n    setIsAllCompleted(isAlltrue);\n  }, [todos]);\n\n  const visibleTodos = useMemo(() => {\n    return todos.filter(todo => {\n      switch (filterBy) {\n        case FilterBy.Active:\n          return !todo.completed;\n\n        case FilterBy.Completed:\n          return todo.completed;\n\n        default:\n          return true;\n      }\n    });\n  }, [todos, filterBy]);\n\n  return (\n    <div className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <FormCreateTodo onSubmit={addTodo} />\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          data-cy=\"toggleAll\"\n          checked={!isAllCompleted}\n          onChange={() => toogleALL(isAllCompleted)}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        <TodoList todos={visibleTodos} />\n      </section>\n\n      <Footer />\n    </div>\n  );\n};\n","import React from 'react';\nimport { Routes, Route, Navigate } from 'react-router';\nimport { TodoApp } from './components/todoApp';\nimport { TodosProvider } from './components/todosContext';\n\nexport const App: React.FC = () => {\n  return (\n    <Routes>\n      <Route path=\"/\">\n        <Route\n          index\n          element={(\n            <TodosProvider>\n              <TodoApp />\n            </TodosProvider>\n          )}\n        />\n        <Route\n          path=\":filterBy\"\n          element={(\n            <TodosProvider>\n              <TodoApp />\n            </TodosProvider>\n          )}\n        />\n      </Route>\n      <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n      <Route\n        path=\"*\"\n        element={<h1>Page not found</h1>}\n      />\n    </Routes>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { HashRouter as Router } from 'react-router-dom';\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}